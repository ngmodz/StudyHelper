// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables. Please check your .env file.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Get the current URL from the browser window
const getRedirectTo = () => {
  try {
    // Get the base URL of the application (without path)
    return window.location.origin;
  } catch (error) {
    console.error("Error getting redirect URL:", error);
    return 'http://localhost:3000'; // Fallback
  }
};

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      storage: localStorage,
      flowType: 'pkce',
      detectSessionInUrl: true
    },
    global: {
      fetch: (...args) => {
        // Custom fetch implementation with timeout
        const [resource, config] = args;
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
        
        return fetch(resource, {
          ...config,
          signal: controller.signal
        }).finally(() => {
          clearTimeout(timeoutId);
        });
      }
    }
  }
);

/**
 * Upload a file to Supabase Storage
 * @param file The file to upload
 * @param path Optional path within the bucket
 * @param bucketName The storage bucket name (defaults to 'notes')
 * @returns The full URL to the uploaded file
 */
export const uploadFileToStorage = async (file: File, path: string = '', bucketName: string = 'notes'): Promise<string> => {
  try {
    // Create a unique file path to avoid collisions
    const timestamp = Date.now();
    const fileExt = file.name.split('.').pop();
    const filePath = `${path ? path + '/' : ''}${timestamp}-${file.name}`;
    
    // Check file size before upload
    const maxSizeInBytes = 50 * 1024 * 1024; // 50 MB limit
    if (file.size > maxSizeInBytes) {
      throw new Error(`File size exceeds the maximum allowed size (50 MB). Your file is ${(file.size / (1024 * 1024)).toFixed(2)} MB.`);
    }

    // Upload with progress tracking
    const { data, error } = await supabase
      .storage
      .from(bucketName)
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false
      });

    if (error) {
      console.error('Error uploading file:', error);
      throw error;
    }

    // Get the public URL for the file
    const { data: { publicUrl } } = supabase
      .storage
      .from(bucketName)
      .getPublicUrl(data.path);

    return publicUrl;
  } catch (error) {
    console.error('Upload failed:', error);
    throw error;
  }
};

/**
 * List notes from the Supabase Storage bucket
 * @param path Path within the bucket to list files from
 * @param bucketName The storage bucket name (defaults to 'notes')
 * @returns Array of file metadata
 */
export const listNotesFromStorage = async (path: string = '', bucketName: string = 'notes') => {
  try {
    // Use retry logic for mobile connections
    let retries = 3;
    let data;
    let error;
    
    while (retries > 0) {
      const result = await supabase
        .storage
        .from(bucketName)
        .list(path, {
          sortBy: { column: 'created_at', order: 'desc' },
          limit: 100
        });
      
      data = result.data;
      error = result.error;
      
      if (!error) break;
      
      // If error, wait and retry
      retries--;
      if (retries > 0) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    if (error) {
      console.error('Error listing files:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('Error listing files:', error);
    throw error;
  }
};

/**
 * Delete a file from Supabase Storage
 * @param filePath Full path to the file including any folders
 * @param bucketName The storage bucket name (defaults to 'notes')
 * @returns True if successful, throws an error otherwise
 */
export const deleteFileFromStorage = async (filePath: string, bucketName: string = 'notes'): Promise<boolean> => {
  try {
    console.log(`Attempting to delete file: ${filePath} from bucket: ${bucketName}`);
    
    const { error } = await supabase
      .storage
      .from(bucketName)
      .remove([filePath]);
      
    if (error) {
      console.error('Error deleting file:', error);
      throw error;
    }
    
    console.log('File deleted successfully');
    return true;
  } catch (error) {
    console.error('Delete failed:', error);
    throw error;
  }
};

/**
 * Get public URL for a file in Supabase Storage
 * @param filePath Path to the file within bucket
 * @param bucketName The storage bucket name (defaults to 'notes')
 * @returns Public URL to the file
 */
export const getPublicFileUrl = (filePath: string, bucketName: string = 'notes'): string => {
  const { data } = supabase
    .storage
    .from(bucketName)
    .getPublicUrl(filePath);
    
  return data.publicUrl;
};
